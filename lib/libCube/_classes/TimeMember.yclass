/**
 * Entry point for this class
 *
 * @author 
 */
interface LibCube:TimeMember extends LibCube:HierarchyElement
    // **************************************************
    // Fields
    // **************************************************
    field date
        --> domains Date
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> dsl -> Textualization
            --> language LANG_en
            --> root "date"
            --> number SINGULAR
        ;
    field quarter
        --> domains libCube:_constLists:quarter
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> dsl -> Textualization
            --> language LANG_en
            --> root "quarter"
            --> number SINGULAR
        ;
    field period
        --> domains LibCube:TimePeriod
        --> documentation "The type of time time period being represented (i.e. day vs month vs year)."
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> dsl -> Textualization
            --> language LANG_en
            --> root "period of time"
            --> number SINGULAR
        ;
    
    // **************************************************
    // methods
    // **************************************************

    method getQuarter()
    --> domains Void
    
    method getLastDayOfPeriod()
    --> domains Date
    --> documentation "returns a date for the last day of the period of TimeMember"
    --> dsl -> Textualization
        --> language LANG_en
        --> root "get last day of period"
        --> number SINGULAR
    ;

    method getFirstDayOfPeriod()
    --> domains Date
    --> documentation "returns a date for the first day of the period of TimeMember"
    --> dsl -> Textualization
        --> language LANG_en
        --> root "get first day of period"
        --> number SINGULAR
    ;

    method getDayCountOfPeriod()
    --> domains Integer
    --> documentation "returns day count of the period of TimeMember"
    --> dsl -> Textualization
        --> language LANG_en
        --> root "get day count of period"
        --> number SINGULAR
    ;

    method validatePeriod()
    --> domains Void
    --> visibility _PRIVATE

    method isLeapYear()
    --> domains Boolean
    --> documentation "returns true if it is a leap year"
    --> dsl -> Textualization
        --> language LANG_en
        --> root "is leap year"
        --> number SINGULAR
    ;

    method getDayCountOfPeriodQuarter()
    --> domains Number
    --> documentation "returns day count for quarter period type"

    method getFirstDayOfPeriodQuarter()
    --> domains Number
    --> documentation "return date of first day of the quarter of the TimeMember"

    method getLastDayOfPeriodQuarter()
    --> domains Number
    --> documentation "return date of last day of the quarter of the TimeMember"

    classProperties
    --> dsl -> Textualization
        --> language LANG_en
        --> root "Cube Time Member"
        --> number SINGULAR
    ;
    --> trackInstances true
    --> dynamicInstances  true 		
;

implementation LibCube:TimeMember
;

/**
 * Function to set quarter of the TimeMember object
 */
function LibCube:TimeMember::getQuarter()
--> action {
	switch {
		case(date == null): quarter = null
		case(date.month <= 3): quarter = Q1
		case(date.month <= 6): quarter = Q2
		case(date.month <= 9): quarter = Q3
		case(date.month <= 12): quarter = Q4
	}
}
;

/**
 * Function to get the last day of period of the TimeMember object
 * @return an object of type Date for the last day of period
 */
function LibCube:TimeMember::getLastDayOfPeriod()
local {
    Date genericDate
    Text monthNumber
}
--> action {
    validatePeriod();
    switch(period) {    
        case(PERIOD_DAY):{return date;}
        case(PERIOD_WEEK):{
            genericDate = date.increment(7 - date.dayOfWeek, UNIT_DAY);
            return genericDate;
        }
        case(PERIOD_WTD):{return date;}
        case(PERIOD_MONTH):{return date.lastDayOfMonth();}
        case(PERIOD_MTD):{return date;}
        case(PERIOD_YEAR):{return Date..stringToDate(concat(date.year, "/12/31") );}
        case(PERIOD_YTD):{return date;}
        case(PERIOD_QUARTER):{return getLastDayOfPeriodQuarter();}
        case(PERIOD_QTD):{return date;}
    }
    
}
;

/**
 * Function to get the first day of period of the TimeMember object
 * @return an object of type Date for the first day of period
 */
function LibCube:TimeMember::getFirstDayOfPeriod()
local {
    Date genericDate
}
--> action {
    validatePeriod();
    switch(period) {    
        case(PERIOD_DAY): {return date;}
        case(PERIOD_WEEK):{
            genericDate = date.increment(1 - date.dayOfWeek , UNIT_DAY);
            return genericDate;
        }
        case(PERIOD_WTD):{
            genericDate = date.increment(1 - date.dayOfWeek , UNIT_DAY);
            return genericDate;
        }
        case(PERIOD_MONTH):{return date.firstDayOfMonth();}
        case(PERIOD_MTD):{return date.firstDayOfMonth();}
        case(PERIOD_YEAR):{return Date..stringToDate(concat(date.year, "/01/01") );}
        case(PERIOD_YTD):{return Date..stringToDate(concat(date.year, "/01/01") );}
        case(PERIOD_QUARTER):{return getFirstDayOfPeriodQuarter()}
        case(PERIOD_QTD):{return getFirstDayOfPeriodQuarter();}    
    }

}
;

/**
 * Function to get the day count of period of the TimeMember object
 * @return an object of type Date for the day count of period
 */
function LibCube:TimeMember::getDayCountOfPeriod()
--> action {
    validatePeriod();
    switch(period) {
        case(PERIOD_DAY):{return 1;}
        case(PERIOD_WEEK):{return date.dayOfWeek;}
        case(PERIOD_WTD):{return date.dayOfWeek;}
        case(PERIOD_MONTH):{return date.day;}
        case(PERIOD_MTD):{return date.day;}
        case(PERIOD_YEAR):{return date.dayOfYear;}
        case(PERIOD_YTD):{return date.dayOfYear;}
        case(PERIOD_QUARTER):{return getDayCountOfPeriodQuarter();}
        case(PERIOD_QTD):{return getDayCountOfPeriodQuarter();}    
    }
}
;

/**
 * Function to validate if period is set for the TimeMember object
 */
function LibCube:TimeMember::validatePeriod()
--> action {
    if(period == null){
        assert(period != null, "the period attribute must be set");
    }
}
;

/**
 * Function to validate if the given year of TimeMember is leap
 * @return true if the year is leap or false if it is not
 */
function LibCube:TimeMember::isLeapYear()
--> action {
    if(date.year mod 4 == 0 && date.year mod 100 > 0){
        return true;
    }
    else{
        return false;
    }
}
;

/**
 * Function to calculate day count for quarter period type
 * @return day count for quarter period type
 */
function LibCube:TimeMember::getDayCountOfPeriodQuarter()
local {
    Integer dayCountQ1
    Integer dayCountQ2
    Integer dayCountQ3
    Integer dayCountQ4
}
--> action {
    getQuarter();
    if(isLeapYear() == true){
        dayCountQ1 = 91;
    }
    else{
        dayCountQ1 = 90;
    }
    dayCountQ2 = 91;
    dayCountQ3 = 92;
    dayCountQ4 = 92;

    if(quarter == Q1){
        return date.dayOfYear;
    }
    if(quarter == Q2){
        return date.dayOfYear - dayCountQ1;
    }
    if(quarter == Q3){
        return date.dayOfYear - dayCountQ1 - dayCountQ2;
    }
    if(quarter == Q4){
        return date.dayOfYear - dayCountQ1 - dayCountQ2 - dayCountQ3;
    }
}
;

/**
 * Function to get the first day of the quarter of the TimeMember
 * @return date of first day of the quarter of the TimeMember
 */
function LibCube:TimeMember::getFirstDayOfPeriodQuarter()
local {
    Date genericDate
    Text monthNumber
}
--> action {
    getQuarter();
    if(quarter == Q1){
        monthNumber = "/01";
    }
    if(quarter == Q2){
        monthNumber = "/04";
    }
    if(quarter == Q3){
        monthNumber = "/07";
    }
    if(quarter == Q4){
        monthNumber = "/10";
    }
    genericDate = Date..stringToDate(concat(date.year, concat(monthNumber,"/01")));
    return genericDate.firstDayOfMonth();
}
;

/**
 * Function to get the first day of the quarter of the TimeMember
 * @return date of first day of the quarter of the TimeMember
 */
function LibCube:TimeMember::getLastDayOfPeriodQuarter()
local {
    Date genericDate
    Text monthNumber
}
--> action {
    getQuarter();
    if(quarter == Q1){
        monthNumber = "/03";
    }
    if(quarter == Q2){
        monthNumber = "/06";
    }
    if(quarter == Q3){
        monthNumber = "/09";
    }
    if(quarter == Q4){
        monthNumber = "/12";
    }
    genericDate = Date..stringToDate(concat(date.year, concat(monthNumber,"/01")));
    return genericDate.lastDayOfMonth();
}
;